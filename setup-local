#!/usr/bin/env bash
# Sets up a Zitadel playground.
#
# Assumes DNS/TLS can be set up according to: https://github.com/jonesinator/macos-dev-setup/
#
# Dependencies:
#   brew install colima docker helm jq kubectl opentofu
set -euo pipefail

# Can run multiple instances by changing profile. (NOT WELL TESTED)
: "${colima_profile:=default}"

# Can change the top-level URL. (NOT WELL TESTED)
: "${base_address:=example.tld}"

# Remove any existing data.
rm -rf zitadel-admin-sa.json terraform.tfstate* .terraform ./zitadel.auto.tfvars
colima delete --force --profile "${colima_profile}" || true

# Set up a new instance of colima with Kubernetes including Traefik ingress.
colima start \
  --cpu 4 \
  --k3s-arg= \
  --kubernetes \
  --memory 8 \
  --network-address \
  --profile "${colima_profile}" \
  --vm-type vz
colima_ip="$(colima status --json --profile "${colima_profile}" |
  jq --exit-status --raw-output .ip_address)"

# Configure DNS to point the base address and all subdomains to the colima IP. If this conflicts
# with another file you're going to have a bad time. That is not automatically detected.
mkdir -p ~/.local/share/dns
cat << EOF > "${HOME}/.local/share/dns/colima-${colima_profile}.conf"
local-zone: "${base_address}." redirect
local-data: "${base_address}. IN A ${colima_ip}"
EOF
sudo brew services restart unbound
sudo dscacheutil -flushcache
sudo killall -HUP mDNSResponder

# Make sure coredns is using the DNS server on the host.
# Note: Nothing that resolves as 127.0.0.1 will be reachable from the cluster.
dns_server="$(colima ssh -- ip --json route get 1.1.1.1 | jq --raw-output '.[0].gateway')"
kubectl get configmap coredns --namespace kube-system -o yaml |
  sed "s|/etc/resolv.conf|${dns_server}|" | kubectl apply -f -
kubectl rollout restart deployment coredns --namespace kube-system

# Set up cert-manager and create a certificate issuer using the already-trusted root certificate on
# the system.
helm repo add jetstack https://charts.jetstack.io --force-update
helm upgrade cert-manager jetstack/cert-manager \
  --create-namespace \
  --install \
  --namespace cert-manager \
  --set crds.enabled=true \
  --version v1.16.2
kubectl create secret tls root-ca-secret --namespace cert-manager \
  --cert="${HOME}/.local/share/ca/root.pem" --key="${HOME}/.local/share/ca/root-key.pem"
kubectl apply -f - << EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: ca-issuer
spec:
  ca:
    secretName: root-ca-secret
EOF

# Deploy MailHog. This allows testing email locally.
mailhog_address="mail.${base_address}"
helm repo add codecentric https://codecentric.github.io/helm-charts
helm install mailhog codecentric/mailhog
kubectl apply -f - << EOF
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: mail-certificate
spec:
  commonName: ${mailhog_address}
  dnsNames:
    - ${mailhog_address}
  secretName: mail-certificate-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: mail-ingress
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(\`${mailhog_address}\`)
      kind: Rule
      services:
        - name: mailhog
          port: 8025
  tls:
    secretName: mail-certificate-secret
EOF

# Deploy cockroachdb, for zitadel.
helm repo add cockroachdb https://charts.cockroachdb.com
helm upgrade db cockroachdb/cockroachdb --install --version 15.0.3 --set tls.enabled=false

# Deploy zitadel.
zitadel_address="id.${base_address}"
helm repo add zitadel https://charts.zitadel.com
helm upgrade --install zitadel zitadel/zitadel -f - << EOF
zitadel:
  masterkey: $(openssl rand -hex 16)
  configmapConfig:
    ExternalSecure: true
    ExternalDomain: ${zitadel_address}
    TLS:
      Enabled: false
    Database:
      Cockroach:
        Host: db-cockroachdb-public
    FirstInstance:
      Org:
        Machine:
          Machine:
            Username: zitadel-admin-sa
            Name: Admin
          MachineKey:
            ExpirationDate: "2026-01-01T00:00:00Z"
            Type: 1
EOF
kubectl apply -f - << EOF
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: id-certificate
spec:
  commonName: ${zitadel_address}
  dnsNames:
    - ${zitadel_address}
  secretName: id-certificate-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: id-ingress
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(\`${zitadel_address}\`)
      kind: Rule
      services:
        - name: zitadel
          port: 8080
          scheme: h2c
          passHostHeader: true
  tls:
    secretName: id-certificate-secret
EOF

app_address="app.${base_address}"

# Configure Zitadel using OpenTofu.
kubectl -n default get secret zitadel-admin-sa -o jsonpath='{ .data.zitadel-admin-sa\.json }' |
  base64 -D > zitadel-admin-sa.json
cat << EOF >> zitadel.auto.tfvars
zitadel_address = "${zitadel_address}"
redirect_address = "${app_address}"
EOF
tofu init
tofu apply -auto-approve

# Extract the client configuration.
api_address="api.${base_address}"
api_client_id="$(tofu output -json | jq --raw-output .api_client_id.value)"
api_client_secret="$(tofu output -json | jq --raw-output .api_client_secret.value)"
api_token="$(tofu output -json | jq --raw-output .api_token.value)"

kubectl create secret generic root-ca-secret \
  --from-file="root.pem=${HOME}/.local/share/ca/root.pem"
kubectl create secret generic api-client-secret \
  --from-literal="CLIENT_ID=${api_client_id}" \
  --from-literal="CLIENT_SECRET=${api_client_secret}"

# Deploy the API service.
docker build api --file api/Dockerfile --tag api
kubectl apply -f - << EOF
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
spec:
  ports:
    - port: 80
      targetPort: 8000
  selector:
    app: api
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: api
          imagePullPolicy: Never
          env:
            - name: ZITADEL_DOMAIN
              value: https://${zitadel_address}
            - name: REQUESTS_CA_BUNDLE
              value: /ca/root.pem
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: api-client-secret
                  key: CLIENT_ID
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: api-client-secret
                  key: CLIENT_SECRET
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: root-ca-volume
              mountPath: /ca
              readOnly: true
      volumes:
        - name: root-ca-volume
          secret:
            secretName: root-ca-secret
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: api-certificate
spec:
  secretName: api-certificate-secret
  dnsNames:
    - ${api_address}
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: api
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(\`${api_address}\`)
      kind: Rule
      services:
        - name: api
          port: 80
  tls:
    secretName: api-certificate-secret
EOF

# Ensure the API server's public endpoint can be hit without a token, and the private endpoint can
# be hit with a token.
until curl --fail https://api.example.tld/api/public; do
  echo "Waiting for API..."
  sleep 2
done
curl --fail https://api.example.tld/api/private --header "Authorization: Bearer ${api_token}"

# Deploy the frontend service.
docker build web --file web/Dockerfile --tag web
kubectl apply -f - << EOF
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: web
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: web
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    app: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: web
          imagePullPolicy: Never
          ports:
            - containerPort: 80
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: web-certificate
spec:
  secretName: web-certificate-secret
  dnsNames:
    - ${app_address}
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: web
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(\`${app_address}\`)
      kind: Rule
      services:
        - name: web
          port: 80
  tls:
    secretName: web-certificate-secret
EOF

# Show the local URLs that can be used to connect to the services.
echo
echo "Zitadel: https://${zitadel_address}"
echo "  Username: zitadel-admin@zitadel.${zitadel_address}"
echo "  Password: Password1!"
echo "MailHog: https://${mailhog_address}"
echo "API: https://${api_address}"
echo "  Token: ${api_token}"
echo "Web: https://${app_address}"
echo
